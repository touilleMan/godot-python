from __future__ import print_function
import os, glob, shutil, subprocess
from SCons.Errors import UserError


Import("env")


env["bits"] = "64"
env.Append(CFLAGS="-m64")
env.Append(LINKFLAGS="-m64")


### Godot binary (to run tests) ###

# fixes pypy on fedora
# https://mail.python.org/pipermail/pypy-dev/2010-December/006588.html
if not os.path.isfile('/lib64/libbz2.so.1.0'):
    if os.path.isfile('/usr/lib64/libbz2.so'):
        subprocess.check_call(['sudo','ln', '-s', '/usr/lib64/libbz2.so', '/lib64/libbz2.so.1.0'])

if not env["godot_binary"]:
    if os.path.isfile(os.path.expanduser('~/godot/bin/godot.x11.tools.64')):
        env["godot_binary"] = File(os.path.expanduser('~/godot/bin/godot.x11.tools.64'))
    elif os.path.isfile('/usr/bin/godot'):
        env["godot_binary"] = File("/usr/bin/godot")
    else:
        env["godot_binary"] = File("godot.x11.opt.debug.64")
        env.Command(
            env["godot_binary"],
            None,
            "curl -L %s/godot.x11.opt.debug.64 -o ${TARGET} && chmod 750 ${TARGET}"
            % env["godot_release_base_url"],
        )
    env.NoClean(env["godot_binary"])


### GDnative stuff ###


if not env["gdnative_include_dir"]:
    env["gdnative_include_dir"] = Dir("../gdnative/include")
if not env["gdnative_wrapper_lib"]:
    env["gdnative_wrapper_lib"] = File(
        "../gdnative/libgdnative_wrapper_code.x11.opt.64.a"
    )
    env.Command(
        env["gdnative_wrapper_lib"],
        None,
        "curl -L %s/libgdnative_wrapper_code.x11.opt.64.a -o ${TARGET}"
        % env["godot_release_base_url"],
    )
    env.NoClean(env["gdnative_wrapper_lib"])


### Python interpreter ###


if env["backend"] == "cpython":
    cpython_src = Dir("cpython")
    env.Command(
        cpython_src,
        None,
        "git clone https://github.com/python/cpython.git --depth=1 --branch=v3.7.1 --single-branch ${TARGET}",
    )
    env.NoClean(cpython_src)

    cpython_build = Dir("cpython_build")
    # TODO: allow to compile cpython with `--with-pydebug` ?
    # Compile CPython and install cffi through pip
    env.Command(
        cpython_build,
        cpython_src,
        "cd ${SOURCE} && " + "echo Configuring CPython... && "
        "1>/dev/null ./configure --enable-shared --prefix=${TARGET.get_abspath()} --with-openssl=/usr && "
        + "echo Building CPython... && "
        "1>/dev/null make -j4 && "
        + "echo Installing CPython in ${TARGET.get_abspath()}... && "
        "1>/dev/null make install && "
        + "LD_LIBRARY_PATH=${TARGET.get_abspath()}/lib ${TARGET.get_abspath()}/bin/pip3 install cffi",
    )
    env.NoClean(cpython_build)

    def generate_build_dir(target, source, env):
        target = target[0]
        cpython_build = source[0]
        libpythonscript = source[1]
        godot_embedded = source[2]

        if os.path.isdir(target.path):
            shutil.rmtree(target.path)
        os.mkdir(target.path)

        def c(subpath=""):
            return os.path.join(cpython_build.abspath, *subpath.split("/"))

        def p(subpath=""):
            return os.path.join(target.abspath, "pythonscript", *subpath.split("/"))

        os.mkdir(p())

        shutil.copy(libpythonscript.path, p())
        open(p(".gdignore"), "w").close()

        if os.path.isdir(c("include")):
            # Windows build of CPython doesn't contain include dir
            shutil.copytree(c("include"), p("include"))

        # Remove __pycache__ to save lots of space
        for root, dirs, files in os.walk(c("lib")):
            if "__pycache__" in dirs:
                shutil.rmtree(os.path.join(root, "__pycache__"))

        shutil.copytree(c("bin"), p("bin"))

        shutil.copytree(c("lib"), p("lib"))
        if env["compressed_stdlib"]:
            shutil.move(p("lib/python3.7"), p("lib/tmp_python3.7"))
            os.mkdir(p("lib/python3.7"))
            shutil.move(
                p("lib/tmp_python3.7/lib-dynload"), p("lib/python3.7/lib-dynload")
            )
            shutil.move(
                p("lib/tmp_python3.7/site-packages"), p("lib/python3.7/site-packages")
            )
            shutil.make_archive(
                base_name=p("lib/python37"),
                format="zip",
                root_dir=p("lib/tmp_python3.7"),
            )
            shutil.rmtree(p("lib/tmp_python3.7"))

        if env["dev_dyn"]:
            os.symlink(godot_embedded.abspath, p("lib/python3.7/site-packages/godot"))
        else:
            shutil.copytree(godot_embedded.path, p("lib/python3.7/site-packages/godot"))

        if "generate_build_dir_hook" in env:
            env["generate_build_dir_hook"](target.abspath)

    env["generate_build_dir"] = generate_build_dir
    env["backend_dir"] = cpython_build
    env.Append(CFLAGS="-DBACKEND_CPYTHON")
    env.Append(CFLAGS="-I %s/include/python3.7m/" % cpython_build.path)
    env.Append(LIBPATH="%s/lib" % cpython_build.path)
    env.Append(LIBS=["python3.7m"])
    env.Append(LINKFLAGS=["-Wl,-rpath,'$$ORIGIN/lib'"])

else:  # pypy

    PYPY_SRC_NAME = "pypy3-v6.0.0-linux64"
    PYPY_SRC_ARCHIVE = "%s.tar.bz2" % PYPY_SRC_NAME
    PYPY_SRC_ARCHIVE_URL = (
        "https://bitbucket.org/pypy/pypy/downloads/%s" % PYPY_SRC_ARCHIVE
    )

    pypy_build = Dir(PYPY_SRC_NAME)

    env.Command(
        PYPY_SRC_ARCHIVE, None, "curl -L %s -o ${TARGET}" % PYPY_SRC_ARCHIVE_URL
    )
    env.NoClean(PYPY_SRC_ARCHIVE)
    env.Command(pypy_build, PYPY_SRC_ARCHIVE, "tar xf ${SOURCE} -C ${TARGET.srcdir}")

    def generate_build_dir(target, source, env):
        target = target[0]
        pypy_build = source[0]
        libpythonscript = source[1]
        godot_embedded = source[2]

        if os.path.isdir(target.path):
            shutil.rmtree(target.path)
        os.mkdir(target.path)

        def c(subpath=""):
            return os.path.join(pypy_build.abspath, *subpath.split("/"))

        def p(subpath=""):
            return os.path.join(target.abspath, "pythonscript", *subpath.split("/"))

        shutil.copytree(c(), p())
        os.unlink(p("LICENSE"))
        os.unlink(p("README.rst"))
        shutil.copy(libpythonscript.path, p())
        open(p(".gdignore"), "w").close()

        if env["dev_dyn"]:
            os.symlink(godot_embedded.abspath, p("site-packages/godot"))
        else:
            shutil.copytree(godot_embedded.path, p("site-packages/godot"))

        if "generate_build_dir_hook" in env:
            env["generate_build_dir_hook"](target.abspath)

    env["generate_build_dir"] = generate_build_dir
    env["backend_dir"] = pypy_build
    env.Append(CFLAGS="-DBACKEND_PYPY")
    env.Append(CFLAGS="-I %s/include" % pypy_build.path)
    env.Append(LIBPATH="%s/bin" % pypy_build.path)
    env.Append(LIBS=["pypy3-c"])
    env.Append(LINKFLAGS=["-Wl,-rpath,'$$ORIGIN/bin'"])
