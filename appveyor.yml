image: Visual Studio 2017

environment:
  VS: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat
  CPP: clang -E
  matrix:
    - TARGET_PLATFORM: windows-64
      ARCH: amd64
      TARGET_BACKEND: cpython
      PYTHON: C:\Python36-x64
    - TARGET_PLATFORM: windows-32
      ARCH: amd64_x86
      TARGET_BACKEND: cpython
      PYTHON: C:\Python36
    # Pypy doesn't support windows 64bits
    # - TARGET_PLATFORM: windows-64
    #   ARCH: amd64
    #   TARGET_BACKEND: pypy
    #   PYTHON: C:\Python36-x64
    - TARGET_PLATFORM: windows-32
      ARCH: amd64_x86
      TARGET_BACKEND: pypy
      PYTHON: C:\Python36

install:
  - set "PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  # - set "PATH=C:\\mingw-w64\\x86_64-6.3.0-posix-seh-rt_v5-rev1\\mingw64\\bin;%PATH%"
  - pip install --egg scons  # it will fail on AppVeyor without --egg flag
  - if defined VS call "%VS%" %ARCH%  # if defined - so we can also use mingw

before_build:
  - git rev-parse HEAD
  - python --version
  - scons --version
  - clang --version
  - cl.exe

build_script:
  # Un-comment if you're in deep troubles...
  # - set SCONS_MSCOMMON_DEBUG=-
  - scons platform=%TARGET_PLATFORM% backend=%TARGET_BACKEND% PYTHON=python
      gdnative_parse_cpp="%CPP%" release_suffix=%APPVEYOR_REPO_TAG_NAME% release

after_build:
  - scons platform=%TARGET_PLATFORM% backend=%TARGET_BACKEND% PYTHON=python
      gdnative_parse_cpp="%CPP%" release_suffix=%APPVEYOR_REPO_TAG_NAME% test

# on_failure:
#   - 7z -tzip a CPythonBuild.zip platforms\windows-64\cpython
#   - appveyor PushArtifact CPythonBuild.zip
#   - 7z -tzip a GodotPythonBuild.zip build
#   - appveyor PushArtifact GodotPythonBuild.zip

artifacts:
  - path: godot-python-*.zip
    name: GodotPythonRelease

deploy:
  provider: GitHub
  auth_token:
    secure: l4e/x4qkjGlFQtgm2QDM6ix8T7Ry4DtSIRjRBHnwwPuiyCFJ6Z1y7JRh9fF2eFIo
  artifact: GodotPythonRelease
  on:
    appveyor_repo_tag: true
